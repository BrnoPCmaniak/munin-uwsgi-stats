#!/usr/bin/env python

# coding: utf8

# your uwsgi stat socket addr/path here

'''
/etc/munin/plugin-conf.d/munin-node

[uwsgi_*]
env.addr 127.0.0.1:4999

'''

UWSGI_STATS = ''

import os
import os.path
import sys
import json
import socket
from pprint import pformat

UWSGI_STATS = UWSGI_STATS or os.environ.get('addr', '')
if not UWSGI_STATS:
    raise Exception('uWSGI stats config not found. %s' % pformat(os.environ))


NAME, MULTI, MODE = os.path.basename(__file__).split('_', 2)

MODES = {
    'listen_queue': ('listen queue', 'listen queue'),
    'listen_queue_errors': ('listen queue errors', 'listen queue errors'),
    'requests': ('requests', 'requests per ${{graph_period}}'),
    'exceptions': ('exceptions', 'exceptions per ${{graph_period}}'),
    'vsz': ('physical memory', 'physical memory'),
    'tx': ('send bytes', 'send bytes'),
    'avg_rt': ('average response time (ms)', 'average reponse time (ms)'),
}


def get_uwsgi_stats():
    '''
    Get the json stats from the uwsgi stats socket and return a dict
    '''
    if ':' in UWSGI_STATS:
        host, port = UWSGI_STATS.split(':')
        sfamily, addr = (socket.AF_INET, (host, int(port)))
    else:
        sfamily, addr = (socket.AF_UNIX, UWSGI_STATS)

    raw_js = ''
    try:
        sock = socket.socket(sfamily, socket.SOCK_STREAM)
        sock.settimeout(3)
        sock.connect(addr)

        while True:
            data = sock.recv(4096)
            if len(data) < 1:
                break
            raw_js += data
    except:
        import traceback
        traceback.print_exc()
        raise Exception('unable to get uWSGI stats at {0}'.format(UWSGI_STATS))

    data = json.loads(raw_js or '{}')
    return data


def print_stats():
    '''
    Calculate values and print them out for munin to graph
    '''
    data = get_uwsgi_stats()

    if MODE in ['listen_queue', 'listen_queue_errors']:
        value = data.get(MODE, 0)
        print '{0}.value {1}'.format(MODE, value)
    elif MODE in ['avg_rt']:
        for worker in data.get('workers', []):
            value = worker.get(MODE, 0) / 1000
            print '{0}_{1}.value {2}'.format(MODE, worker['id'], value)
    else:
        for worker in data.get('workers', []):
            value = worker.get(MODE, 0)
            print '{0}_{1}.value {2}'.format(MODE, worker['id'], value)


def print_config():
    '''
    Print the config for munin
    '''
    data = get_uwsgi_stats()
    workers = data.get('workers', [])
    graph = ('graph_title {desc}\n'
             'graph_vlabel {vlabel}\n'
             'graph_category uWSGI\n').format(desc=MODES[MODE][0],
                                              vlabel=MODES[MODE][1])
    out = ''
    if MODE in ['tx', 'vsz']:
        graph += 'graph_args --base 1024\n'
    if MODE in ['listen_queue', 'listen_queue_errors']:
        out += '{name}.label {name}'.format(name=MODE)
    else:
        for worker in workers:
            if MODE in ['requests', 'exceptions', 'tx']:
                out += '{name}_{worker}.type DERIVE\n'
                out += '{name}_{worker}.min 0\n'
            out += "{name}_{worker}.label {name} {worker}\n"
            out = out.format(name=MODE, worker=worker['id'])
    print graph + out


def main():
    '''
    Process args and do stuff.
    '''
    if len(sys.argv) > 1:
        opt = sys.argv[1]

        if opt == 'suggest':
            print '\n'.join(MODES.keys())
        elif opt == 'install':
            path = os.path.realpath(__file__)
            for mode in MODES.keys():
                os.system('ln -s {0} /etc/munin/plugins/{1}_{2}_{3}'.format(
                    path, NAME, MULTI, mode))
        elif opt == 'config' and MODE in MODES:
            print_config()
    else:
        print_stats()


if __name__ == '__main__':
    main()
