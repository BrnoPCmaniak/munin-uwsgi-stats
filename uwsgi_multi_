#!/usr/bin/env python

# coding: utf8

# your uwsgi stat socket addr/path here

"""
/etc/munin/plugin-conf.d/munin-node

[uwsgi_*]
env.addr 127.0.0.1:4999

"""

UWSGI_STATS = ''

import os, os.path, sys, time, datetime, json, re, socket
from pprint import pformat

UWSGI_STATS = UWSGI_STATS or os.environ.get('addr', '')
if not UWSGI_STATS:
    raise Exception('uWSGI stats config not found. %s' % pformat(os.environ))


if ':' in UWSGI_STATS:
    t = UWSGI_STATS.split(':')
    sfamily, addr = (socket.AF_INET, (t[0], int(t[1])) )
else:
    sfamily, addr = (socket.AF_UNIX, UWSGI_STATS)

name, p, mode = os.path.basename(__file__).partition('_')

modes = {
    'listen_queue': 'listen queue',
    'listen_queue_errors': 'listen queue errors',
    'requests': 'requests',
    'exceptions': 'exceptions',
    'vsz': 'physical memory',
    'tx': 'send bytes',
    'avg_rt': 'average response time (ms)',
}


def get_uwsgi_stats():
    raw_js = ''
    try:
        sock = socket.socket(sfamily, socket.SOCK_STREAM)
        sock.settimeout(3)
        sock.connect(addr)

        while True:
            data = sock.recv(4096)
            if len(data) < 1:
                break
            raw_js += data
    except:
        import traceback
        traceback.print_exc()
        raise Exception('unable to get uWSGI stats at {0}'.format(UWSGI_STATS))

    data = json.loads(raw_js or '{}')
    workers = data.get('workers', [])
    return data, workers


if len(sys.argv) > 1:
    opt = sys.argv[1]

    if opt == 'suggest':
        print '\n'.join(modes.keys())
    elif opt == 'install':
        path = os.path.realpath(__file__)
        for x in modes.keys():
            os.system('ln -s {0} /etc/munin/plugins/{1}_{2}'.format(path,
                                                                    name,
                                                                    x))
    elif opt == 'config' and mode in modes:
        _, workers = get_uwsgi_stats()
        out = ('graph_title %(desc)s\n'
               'graph_vlabel %(desc)s\n'
               'graph_category uWSGI\n')
        if mode in ['tx', 'vsz']:
            out += 'graph_args --base 1024\n'
        for worker in workers:
            if mode in ['requests', 'exceptions', 'tx']:
                out += '%(name)s_%(worker)s.type DERIVE\n'
                out += '%(name)s_%(worker)s.min 0\n'
            out += "%(name)s_%(worker)s.label %(name)s"
            out = out % {'worker': worker['id']}
        out = out % {'name': mode, 'desc': modes[mode]}
        print out
else:

    data, workers = get_uwsgi_stats()

    if mode in ['listen_queue', 'listen_queue_errors']:
        value = data.get(mode, 0)
    elif mode in ['avg_rt']:
        value = sum([x.get(mode, 0)/1000 for x in workers]) / len(workers)
    else:
        value = sum([x.get(mode, 0) for x in workers])
    print '%s.value %s' % (mode, value)
